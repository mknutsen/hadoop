/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package twitter.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Tweet extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2463803309749913351L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Tweet\",\"namespace\":\"twitter.avro\",\"fields\":[{\"name\":\"created_at\",\"type\":\"string\"},{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"text\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"source\",\"type\":\"string\"},{\"name\":\"user\",\"type\":{\"type\":\"record\",\"name\":\"User\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"screen_name\",\"type\":\"string\"},{\"name\":\"location\",\"type\":[\"string\",\"null\"],\"default\":\"null\"},{\"name\":\"description\",\"type\":[\"string\",\"null\"],\"default\":\"null\"},{\"name\":\"followers_count\",\"type\":\"int\"},{\"name\":\"statuses_count\",\"type\":\"int\"},{\"name\":\"geo_enabled\",\"type\":\"boolean\"},{\"name\":\"lang\",\"type\":\"string\"}]}},{\"name\":\"coordinate\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Coordinate\",\"fields\":[{\"name\":\"long\",\"type\":[\"double\",\"null\"],\"default\":0},{\"name\":\"lat\",\"type\":[\"double\",\"null\"],\"default\":0}]}]},{\"name\":\"retweet_count\",\"type\":\"int\"},{\"name\":\"favorite_count\",\"type\":\"int\"},{\"name\":\"entities\",\"type\":{\"type\":\"record\",\"name\":\"Entity\",\"fields\":[{\"name\":\"hashtags\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"urls\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"user_mentions\",\"type\":{\"type\":\"array\",\"items\":\"string\"}}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence created_at;
  @Deprecated public long id;
  @Deprecated public java.lang.CharSequence text;
  @Deprecated public java.lang.CharSequence source;
  @Deprecated public twitter.avro.User user;
  @Deprecated public twitter.avro.Coordinate coordinate;
  @Deprecated public int retweet_count;
  @Deprecated public int favorite_count;
  @Deprecated public twitter.avro.Entity entities;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Tweet() {}

  /**
   * All-args constructor.
   */
  public Tweet(java.lang.CharSequence created_at, java.lang.Long id, java.lang.CharSequence text, java.lang.CharSequence source, twitter.avro.User user, twitter.avro.Coordinate coordinate, java.lang.Integer retweet_count, java.lang.Integer favorite_count, twitter.avro.Entity entities) {
    this.created_at = created_at;
    this.id = id;
    this.text = text;
    this.source = source;
    this.user = user;
    this.coordinate = coordinate;
    this.retweet_count = retweet_count;
    this.favorite_count = favorite_count;
    this.entities = entities;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return created_at;
    case 1: return id;
    case 2: return text;
    case 3: return source;
    case 4: return user;
    case 5: return coordinate;
    case 6: return retweet_count;
    case 7: return favorite_count;
    case 8: return entities;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: created_at = (java.lang.CharSequence)value$; break;
    case 1: id = (java.lang.Long)value$; break;
    case 2: text = (java.lang.CharSequence)value$; break;
    case 3: source = (java.lang.CharSequence)value$; break;
    case 4: user = (twitter.avro.User)value$; break;
    case 5: coordinate = (twitter.avro.Coordinate)value$; break;
    case 6: retweet_count = (java.lang.Integer)value$; break;
    case 7: favorite_count = (java.lang.Integer)value$; break;
    case 8: entities = (twitter.avro.Entity)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'created_at' field.
   */
  public java.lang.CharSequence getCreatedAt() {
    return created_at;
  }

  /**
   * Sets the value of the 'created_at' field.
   * @param value the value to set.
   */
  public void setCreatedAt(java.lang.CharSequence value) {
    this.created_at = value;
  }

  /**
   * Gets the value of the 'id' field.
   */
  public java.lang.Long getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'text' field.
   */
  public java.lang.CharSequence getText() {
    return text;
  }

  /**
   * Sets the value of the 'text' field.
   * @param value the value to set.
   */
  public void setText(java.lang.CharSequence value) {
    this.text = value;
  }

  /**
   * Gets the value of the 'source' field.
   */
  public java.lang.CharSequence getSource() {
    return source;
  }

  /**
   * Sets the value of the 'source' field.
   * @param value the value to set.
   */
  public void setSource(java.lang.CharSequence value) {
    this.source = value;
  }

  /**
   * Gets the value of the 'user' field.
   */
  public twitter.avro.User getUser() {
    return user;
  }

  /**
   * Sets the value of the 'user' field.
   * @param value the value to set.
   */
  public void setUser(twitter.avro.User value) {
    this.user = value;
  }

  /**
   * Gets the value of the 'coordinate' field.
   */
  public twitter.avro.Coordinate getCoordinate() {
    return coordinate;
  }

  /**
   * Sets the value of the 'coordinate' field.
   * @param value the value to set.
   */
  public void setCoordinate(twitter.avro.Coordinate value) {
    this.coordinate = value;
  }

  /**
   * Gets the value of the 'retweet_count' field.
   */
  public java.lang.Integer getRetweetCount() {
    return retweet_count;
  }

  /**
   * Sets the value of the 'retweet_count' field.
   * @param value the value to set.
   */
  public void setRetweetCount(java.lang.Integer value) {
    this.retweet_count = value;
  }

  /**
   * Gets the value of the 'favorite_count' field.
   */
  public java.lang.Integer getFavoriteCount() {
    return favorite_count;
  }

  /**
   * Sets the value of the 'favorite_count' field.
   * @param value the value to set.
   */
  public void setFavoriteCount(java.lang.Integer value) {
    this.favorite_count = value;
  }

  /**
   * Gets the value of the 'entities' field.
   */
  public twitter.avro.Entity getEntities() {
    return entities;
  }

  /**
   * Sets the value of the 'entities' field.
   * @param value the value to set.
   */
  public void setEntities(twitter.avro.Entity value) {
    this.entities = value;
  }

  /**
   * Creates a new Tweet RecordBuilder.
   * @return A new Tweet RecordBuilder
   */
  public static twitter.avro.Tweet.Builder newBuilder() {
    return new twitter.avro.Tweet.Builder();
  }
  
  /**
   * Creates a new Tweet RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Tweet RecordBuilder
   */
  public static twitter.avro.Tweet.Builder newBuilder(twitter.avro.Tweet.Builder other) {
    return new twitter.avro.Tweet.Builder(other);
  }
  
  /**
   * Creates a new Tweet RecordBuilder by copying an existing Tweet instance.
   * @param other The existing instance to copy.
   * @return A new Tweet RecordBuilder
   */
  public static twitter.avro.Tweet.Builder newBuilder(twitter.avro.Tweet other) {
    return new twitter.avro.Tweet.Builder(other);
  }
  
  /**
   * RecordBuilder for Tweet instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Tweet>
    implements org.apache.avro.data.RecordBuilder<Tweet> {

    private java.lang.CharSequence created_at;
    private long id;
    private java.lang.CharSequence text;
    private java.lang.CharSequence source;
    private twitter.avro.User user;
    private twitter.avro.User.Builder userBuilder;
    private twitter.avro.Coordinate coordinate;
    private twitter.avro.Coordinate.Builder coordinateBuilder;
    private int retweet_count;
    private int favorite_count;
    private twitter.avro.Entity entities;
    private twitter.avro.Entity.Builder entitiesBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(twitter.avro.Tweet.SCHEMA$);
    }
    
    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(twitter.avro.Tweet.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.created_at)) {
        this.created_at = data().deepCopy(fields()[0].schema(), other.created_at);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.id)) {
        this.id = data().deepCopy(fields()[1].schema(), other.id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.text)) {
        this.text = data().deepCopy(fields()[2].schema(), other.text);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.source)) {
        this.source = data().deepCopy(fields()[3].schema(), other.source);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.user)) {
        this.user = data().deepCopy(fields()[4].schema(), other.user);
        fieldSetFlags()[4] = true;
      }
      if (other.hasUserBuilder()) {
        this.userBuilder = twitter.avro.User.newBuilder(other.getUserBuilder());
      }
      if (isValidValue(fields()[5], other.coordinate)) {
        this.coordinate = data().deepCopy(fields()[5].schema(), other.coordinate);
        fieldSetFlags()[5] = true;
      }
      if (other.hasCoordinateBuilder()) {
        this.coordinateBuilder = twitter.avro.Coordinate.newBuilder(other.getCoordinateBuilder());
      }
      if (isValidValue(fields()[6], other.retweet_count)) {
        this.retweet_count = data().deepCopy(fields()[6].schema(), other.retweet_count);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.favorite_count)) {
        this.favorite_count = data().deepCopy(fields()[7].schema(), other.favorite_count);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.entities)) {
        this.entities = data().deepCopy(fields()[8].schema(), other.entities);
        fieldSetFlags()[8] = true;
      }
      if (other.hasEntitiesBuilder()) {
        this.entitiesBuilder = twitter.avro.Entity.newBuilder(other.getEntitiesBuilder());
      }
    }
    
    /**
     * Creates a Builder by copying an existing Tweet instance
     * @param other The existing instance to copy.
     */
    private Builder(twitter.avro.Tweet other) {
            super(twitter.avro.Tweet.SCHEMA$);
      if (isValidValue(fields()[0], other.created_at)) {
        this.created_at = data().deepCopy(fields()[0].schema(), other.created_at);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.id)) {
        this.id = data().deepCopy(fields()[1].schema(), other.id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.text)) {
        this.text = data().deepCopy(fields()[2].schema(), other.text);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.source)) {
        this.source = data().deepCopy(fields()[3].schema(), other.source);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.user)) {
        this.user = data().deepCopy(fields()[4].schema(), other.user);
        fieldSetFlags()[4] = true;
      }
      this.userBuilder = null;
      if (isValidValue(fields()[5], other.coordinate)) {
        this.coordinate = data().deepCopy(fields()[5].schema(), other.coordinate);
        fieldSetFlags()[5] = true;
      }
      this.coordinateBuilder = null;
      if (isValidValue(fields()[6], other.retweet_count)) {
        this.retweet_count = data().deepCopy(fields()[6].schema(), other.retweet_count);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.favorite_count)) {
        this.favorite_count = data().deepCopy(fields()[7].schema(), other.favorite_count);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.entities)) {
        this.entities = data().deepCopy(fields()[8].schema(), other.entities);
        fieldSetFlags()[8] = true;
      }
      this.entitiesBuilder = null;
    }

    /**
      * Gets the value of the 'created_at' field.
      * @return The value.
      */
    public java.lang.CharSequence getCreatedAt() {
      return created_at;
    }

    /**
      * Sets the value of the 'created_at' field.
      * @param value The value of 'created_at'.
      * @return This builder.
      */
    public twitter.avro.Tweet.Builder setCreatedAt(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.created_at = value;
      fieldSetFlags()[0] = true;
      return this; 
    }

    /**
      * Checks whether the 'created_at' field has been set.
      * @return True if the 'created_at' field has been set, false otherwise.
      */
    public boolean hasCreatedAt() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'created_at' field.
      * @return This builder.
      */
    public twitter.avro.Tweet.Builder clearCreatedAt() {
      created_at = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.Long getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public twitter.avro.Tweet.Builder setId(long value) {
      validate(fields()[1], value);
      this.id = value;
      fieldSetFlags()[1] = true;
      return this; 
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public twitter.avro.Tweet.Builder clearId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'text' field.
      * @return The value.
      */
    public java.lang.CharSequence getText() {
      return text;
    }

    /**
      * Sets the value of the 'text' field.
      * @param value The value of 'text'.
      * @return This builder.
      */
    public twitter.avro.Tweet.Builder setText(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.text = value;
      fieldSetFlags()[2] = true;
      return this; 
    }

    /**
      * Checks whether the 'text' field has been set.
      * @return True if the 'text' field has been set, false otherwise.
      */
    public boolean hasText() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'text' field.
      * @return This builder.
      */
    public twitter.avro.Tweet.Builder clearText() {
      text = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'source' field.
      * @return The value.
      */
    public java.lang.CharSequence getSource() {
      return source;
    }

    /**
      * Sets the value of the 'source' field.
      * @param value The value of 'source'.
      * @return This builder.
      */
    public twitter.avro.Tweet.Builder setSource(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.source = value;
      fieldSetFlags()[3] = true;
      return this; 
    }

    /**
      * Checks whether the 'source' field has been set.
      * @return True if the 'source' field has been set, false otherwise.
      */
    public boolean hasSource() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'source' field.
      * @return This builder.
      */
    public twitter.avro.Tweet.Builder clearSource() {
      source = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'user' field.
      * @return The value.
      */
    public twitter.avro.User getUser() {
      return user;
    }

    /**
      * Sets the value of the 'user' field.
      * @param value The value of 'user'.
      * @return This builder.
      */
    public twitter.avro.Tweet.Builder setUser(twitter.avro.User value) {
      validate(fields()[4], value);
      this.userBuilder = null;
      this.user = value;
      fieldSetFlags()[4] = true;
      return this; 
    }

    /**
      * Checks whether the 'user' field has been set.
      * @return True if the 'user' field has been set, false otherwise.
      */
    public boolean hasUser() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'user' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public twitter.avro.User.Builder getUserBuilder() {
      if (userBuilder == null) {
        if (hasUser()) {
          setUserBuilder(twitter.avro.User.newBuilder(user));
        } else {
          setUserBuilder(twitter.avro.User.newBuilder());
        }
      }
      return userBuilder;
    }

    /**
     * Sets the Builder instance for the 'user' field
     * @return This builder.
     */
    public twitter.avro.Tweet.Builder setUserBuilder(twitter.avro.User.Builder value) {
      clearUser();
      userBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'user' field has an active Builder instance
     * @return True if the 'user' field has an active Builder instance
     */
    public boolean hasUserBuilder() {
      return userBuilder != null;
    }

    /**
      * Clears the value of the 'user' field.
      * @return This builder.
      */
    public twitter.avro.Tweet.Builder clearUser() {
      user = null;
      userBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'coordinate' field.
      * @return The value.
      */
    public twitter.avro.Coordinate getCoordinate() {
      return coordinate;
    }

    /**
      * Sets the value of the 'coordinate' field.
      * @param value The value of 'coordinate'.
      * @return This builder.
      */
    public twitter.avro.Tweet.Builder setCoordinate(twitter.avro.Coordinate value) {
      validate(fields()[5], value);
      this.coordinateBuilder = null;
      this.coordinate = value;
      fieldSetFlags()[5] = true;
      return this; 
    }

    /**
      * Checks whether the 'coordinate' field has been set.
      * @return True if the 'coordinate' field has been set, false otherwise.
      */
    public boolean hasCoordinate() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'coordinate' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public twitter.avro.Coordinate.Builder getCoordinateBuilder() {
      if (coordinateBuilder == null) {
        if (hasCoordinate()) {
          setCoordinateBuilder(twitter.avro.Coordinate.newBuilder(coordinate));
        } else {
          setCoordinateBuilder(twitter.avro.Coordinate.newBuilder());
        }
      }
      return coordinateBuilder;
    }

    /**
     * Sets the Builder instance for the 'coordinate' field
     * @return This builder.
     */
    public twitter.avro.Tweet.Builder setCoordinateBuilder(twitter.avro.Coordinate.Builder value) {
      clearCoordinate();
      coordinateBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'coordinate' field has an active Builder instance
     * @return True if the 'coordinate' field has an active Builder instance
     */
    public boolean hasCoordinateBuilder() {
      return coordinateBuilder != null;
    }

    /**
      * Clears the value of the 'coordinate' field.
      * @return This builder.
      */
    public twitter.avro.Tweet.Builder clearCoordinate() {
      coordinate = null;
      coordinateBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'retweet_count' field.
      * @return The value.
      */
    public java.lang.Integer getRetweetCount() {
      return retweet_count;
    }

    /**
      * Sets the value of the 'retweet_count' field.
      * @param value The value of 'retweet_count'.
      * @return This builder.
      */
    public twitter.avro.Tweet.Builder setRetweetCount(int value) {
      validate(fields()[6], value);
      this.retweet_count = value;
      fieldSetFlags()[6] = true;
      return this; 
    }

    /**
      * Checks whether the 'retweet_count' field has been set.
      * @return True if the 'retweet_count' field has been set, false otherwise.
      */
    public boolean hasRetweetCount() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'retweet_count' field.
      * @return This builder.
      */
    public twitter.avro.Tweet.Builder clearRetweetCount() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'favorite_count' field.
      * @return The value.
      */
    public java.lang.Integer getFavoriteCount() {
      return favorite_count;
    }

    /**
      * Sets the value of the 'favorite_count' field.
      * @param value The value of 'favorite_count'.
      * @return This builder.
      */
    public twitter.avro.Tweet.Builder setFavoriteCount(int value) {
      validate(fields()[7], value);
      this.favorite_count = value;
      fieldSetFlags()[7] = true;
      return this; 
    }

    /**
      * Checks whether the 'favorite_count' field has been set.
      * @return True if the 'favorite_count' field has been set, false otherwise.
      */
    public boolean hasFavoriteCount() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'favorite_count' field.
      * @return This builder.
      */
    public twitter.avro.Tweet.Builder clearFavoriteCount() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'entities' field.
      * @return The value.
      */
    public twitter.avro.Entity getEntities() {
      return entities;
    }

    /**
      * Sets the value of the 'entities' field.
      * @param value The value of 'entities'.
      * @return This builder.
      */
    public twitter.avro.Tweet.Builder setEntities(twitter.avro.Entity value) {
      validate(fields()[8], value);
      this.entitiesBuilder = null;
      this.entities = value;
      fieldSetFlags()[8] = true;
      return this; 
    }

    /**
      * Checks whether the 'entities' field has been set.
      * @return True if the 'entities' field has been set, false otherwise.
      */
    public boolean hasEntities() {
      return fieldSetFlags()[8];
    }

    /**
     * Gets the Builder instance for the 'entities' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public twitter.avro.Entity.Builder getEntitiesBuilder() {
      if (entitiesBuilder == null) {
        if (hasEntities()) {
          setEntitiesBuilder(twitter.avro.Entity.newBuilder(entities));
        } else {
          setEntitiesBuilder(twitter.avro.Entity.newBuilder());
        }
      }
      return entitiesBuilder;
    }

    /**
     * Sets the Builder instance for the 'entities' field
     * @return This builder.
     */
    public twitter.avro.Tweet.Builder setEntitiesBuilder(twitter.avro.Entity.Builder value) {
      clearEntities();
      entitiesBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'entities' field has an active Builder instance
     * @return True if the 'entities' field has an active Builder instance
     */
    public boolean hasEntitiesBuilder() {
      return entitiesBuilder != null;
    }

    /**
      * Clears the value of the 'entities' field.
      * @return This builder.
      */
    public twitter.avro.Tweet.Builder clearEntities() {
      entities = null;
      entitiesBuilder = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    public Tweet build() {
      try {
        Tweet record = new Tweet();
        record.created_at = fieldSetFlags()[0] ? this.created_at : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.id = fieldSetFlags()[1] ? this.id : (java.lang.Long) defaultValue(fields()[1]);
        record.text = fieldSetFlags()[2] ? this.text : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.source = fieldSetFlags()[3] ? this.source : (java.lang.CharSequence) defaultValue(fields()[3]);
        if (userBuilder != null) {
          record.user = this.userBuilder.build();
        } else {
          record.user = fieldSetFlags()[4] ? this.user : (twitter.avro.User) defaultValue(fields()[4]);
        }
        if (coordinateBuilder != null) {
          record.coordinate = this.coordinateBuilder.build();
        } else {
          record.coordinate = fieldSetFlags()[5] ? this.coordinate : (twitter.avro.Coordinate) defaultValue(fields()[5]);
        }
        record.retweet_count = fieldSetFlags()[6] ? this.retweet_count : (java.lang.Integer) defaultValue(fields()[6]);
        record.favorite_count = fieldSetFlags()[7] ? this.favorite_count : (java.lang.Integer) defaultValue(fields()[7]);
        if (entitiesBuilder != null) {
          record.entities = this.entitiesBuilder.build();
        } else {
          record.entities = fieldSetFlags()[8] ? this.entities : (twitter.avro.Entity) defaultValue(fields()[8]);
        }
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);  

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, org.apache.avro.specific.SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);  

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, org.apache.avro.specific.SpecificData.getDecoder(in));
  }

}
