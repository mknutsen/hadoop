/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package twitter.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Entity extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2775986923843412220L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Entity\",\"namespace\":\"twitter.avro\",\"fields\":[{\"name\":\"hashtags\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"urls\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"user_mentions\",\"type\":{\"type\":\"array\",\"items\":\"string\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.util.List<java.lang.CharSequence> hashtags;
  @Deprecated public java.util.List<java.lang.CharSequence> urls;
  @Deprecated public java.util.List<java.lang.CharSequence> user_mentions;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Entity() {}

  /**
   * All-args constructor.
   */
  public Entity(java.util.List<java.lang.CharSequence> hashtags, java.util.List<java.lang.CharSequence> urls, java.util.List<java.lang.CharSequence> user_mentions) {
    this.hashtags = hashtags;
    this.urls = urls;
    this.user_mentions = user_mentions;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return hashtags;
    case 1: return urls;
    case 2: return user_mentions;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: hashtags = (java.util.List<java.lang.CharSequence>)value$; break;
    case 1: urls = (java.util.List<java.lang.CharSequence>)value$; break;
    case 2: user_mentions = (java.util.List<java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'hashtags' field.
   */
  public java.util.List<java.lang.CharSequence> getHashtags() {
    return hashtags;
  }

  /**
   * Sets the value of the 'hashtags' field.
   * @param value the value to set.
   */
  public void setHashtags(java.util.List<java.lang.CharSequence> value) {
    this.hashtags = value;
  }

  /**
   * Gets the value of the 'urls' field.
   */
  public java.util.List<java.lang.CharSequence> getUrls() {
    return urls;
  }

  /**
   * Sets the value of the 'urls' field.
   * @param value the value to set.
   */
  public void setUrls(java.util.List<java.lang.CharSequence> value) {
    this.urls = value;
  }

  /**
   * Gets the value of the 'user_mentions' field.
   */
  public java.util.List<java.lang.CharSequence> getUserMentions() {
    return user_mentions;
  }

  /**
   * Sets the value of the 'user_mentions' field.
   * @param value the value to set.
   */
  public void setUserMentions(java.util.List<java.lang.CharSequence> value) {
    this.user_mentions = value;
  }

  /**
   * Creates a new Entity RecordBuilder.
   * @return A new Entity RecordBuilder
   */
  public static twitter.avro.Entity.Builder newBuilder() {
    return new twitter.avro.Entity.Builder();
  }
  
  /**
   * Creates a new Entity RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Entity RecordBuilder
   */
  public static twitter.avro.Entity.Builder newBuilder(twitter.avro.Entity.Builder other) {
    return new twitter.avro.Entity.Builder(other);
  }
  
  /**
   * Creates a new Entity RecordBuilder by copying an existing Entity instance.
   * @param other The existing instance to copy.
   * @return A new Entity RecordBuilder
   */
  public static twitter.avro.Entity.Builder newBuilder(twitter.avro.Entity other) {
    return new twitter.avro.Entity.Builder(other);
  }
  
  /**
   * RecordBuilder for Entity instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Entity>
    implements org.apache.avro.data.RecordBuilder<Entity> {

    private java.util.List<java.lang.CharSequence> hashtags;
    private java.util.List<java.lang.CharSequence> urls;
    private java.util.List<java.lang.CharSequence> user_mentions;

    /** Creates a new Builder */
    private Builder() {
      super(twitter.avro.Entity.SCHEMA$);
    }
    
    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(twitter.avro.Entity.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.hashtags)) {
        this.hashtags = data().deepCopy(fields()[0].schema(), other.hashtags);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.urls)) {
        this.urls = data().deepCopy(fields()[1].schema(), other.urls);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.user_mentions)) {
        this.user_mentions = data().deepCopy(fields()[2].schema(), other.user_mentions);
        fieldSetFlags()[2] = true;
      }
    }
    
    /**
     * Creates a Builder by copying an existing Entity instance
     * @param other The existing instance to copy.
     */
    private Builder(twitter.avro.Entity other) {
            super(twitter.avro.Entity.SCHEMA$);
      if (isValidValue(fields()[0], other.hashtags)) {
        this.hashtags = data().deepCopy(fields()[0].schema(), other.hashtags);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.urls)) {
        this.urls = data().deepCopy(fields()[1].schema(), other.urls);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.user_mentions)) {
        this.user_mentions = data().deepCopy(fields()[2].schema(), other.user_mentions);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'hashtags' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getHashtags() {
      return hashtags;
    }

    /**
      * Sets the value of the 'hashtags' field.
      * @param value The value of 'hashtags'.
      * @return This builder.
      */
    public twitter.avro.Entity.Builder setHashtags(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[0], value);
      this.hashtags = value;
      fieldSetFlags()[0] = true;
      return this; 
    }

    /**
      * Checks whether the 'hashtags' field has been set.
      * @return True if the 'hashtags' field has been set, false otherwise.
      */
    public boolean hasHashtags() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'hashtags' field.
      * @return This builder.
      */
    public twitter.avro.Entity.Builder clearHashtags() {
      hashtags = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'urls' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getUrls() {
      return urls;
    }

    /**
      * Sets the value of the 'urls' field.
      * @param value The value of 'urls'.
      * @return This builder.
      */
    public twitter.avro.Entity.Builder setUrls(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[1], value);
      this.urls = value;
      fieldSetFlags()[1] = true;
      return this; 
    }

    /**
      * Checks whether the 'urls' field has been set.
      * @return True if the 'urls' field has been set, false otherwise.
      */
    public boolean hasUrls() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'urls' field.
      * @return This builder.
      */
    public twitter.avro.Entity.Builder clearUrls() {
      urls = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'user_mentions' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getUserMentions() {
      return user_mentions;
    }

    /**
      * Sets the value of the 'user_mentions' field.
      * @param value The value of 'user_mentions'.
      * @return This builder.
      */
    public twitter.avro.Entity.Builder setUserMentions(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[2], value);
      this.user_mentions = value;
      fieldSetFlags()[2] = true;
      return this; 
    }

    /**
      * Checks whether the 'user_mentions' field has been set.
      * @return True if the 'user_mentions' field has been set, false otherwise.
      */
    public boolean hasUserMentions() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'user_mentions' field.
      * @return This builder.
      */
    public twitter.avro.Entity.Builder clearUserMentions() {
      user_mentions = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public Entity build() {
      try {
        Entity record = new Entity();
        record.hashtags = fieldSetFlags()[0] ? this.hashtags : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[0]);
        record.urls = fieldSetFlags()[1] ? this.urls : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[1]);
        record.user_mentions = fieldSetFlags()[2] ? this.user_mentions : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);  

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, org.apache.avro.specific.SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);  

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, org.apache.avro.specific.SpecificData.getDecoder(in));
  }

}
